#!/usr/bin/python3
#
# Copyright (c) 2021 Jeff Doozan
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Extracts translation sections from wiktionary entries
"""

import enwiktionary_sectionparser as sectionparser
import os
import re
import sys
from pywikibot import xmlreader
from enwiktionary_wordlist.wikiextract import WikiExtractWithRev

def main():

    import argparse
    argparser = argparse.ArgumentParser(description="Find lemmas with only 'form of' senses")
    argparser.add_argument("--xml", help="xml dump to read")
    argparser.add_argument("--wxt", help="Read articles from specified extract data file")
    argparser.add_argument("--limit", type=int, help="Limit processing to first N articles")
    argparser.add_argument("--progress", help="Display progress", action='store_true')
    args = argparser.parse_args()


    if args.wxt:
        iter_pages = WikiExtractWithRev.iter_articles_from_bz2(args.wxt)
    elif args.xml:
        dump = xmlreader.XmlDump(args.xml)
        iter_pages = dump.parse()
    else:
        raise ValueError("must supply --xml or --wxt")

    count = 0
    seen = set()
    for page in iter_pages:
        if ":" in page.title or "/" in page.title:
            continue

        if not count % 1000 and args.progress:
            print(count, end = '\r', file=sys.stderr)

        if args.limit and count >= args.limit:
            break
        count += 1

        if "===Translations===" not in page.text:
            continue

        entry = sectionparser.parse(page.text, page.title)
        if not entry:
            continue

        for section in entry.ifilter_sections(matches=lambda x: x.title == "Translations"):
            path = ":".join(reversed(list(section.parent.lineage)))
#            if path in seen:
#                print("duplicate", path, file=sys.stderr)
            seen.add(path)
            print(f"_____{path}_____")
            print(section.lines)

if __name__ == "__main__":
    main()
